const config = require("./config")
config.load();

var path = require("path");
var absolutePath = path.resolve("");
abs_path = absolutePath + "/NezrenaApp/modules/node_modules/MailModule/";

const fs = require("fs")

const args = process.argv.slice(2);
if (args.length > 0) {
    const nodemailer = require('nodemailer')

    let file = args[0];

    if (fs.existsSync(abs_path+`mail/out/${file}`))
        fs.readFile(abs_path+`mail/out/${file}/mail.json`, (err, data) => {
            if (err) {
                fs.renameSync(abs_path+`mail/out/${file}`, abs_path+`mail/sent/${file}`);
                return;
            }

            let mail = JSON.parse(data.toString());
            let files = fs.readdirSync(abs_path+`mail/out/${file}`);

            const index = files.indexOf(abs_path+"mail.json");
            if (index > -1)
                files.splice(index, 1);

            files = files.map(name => {
                return {
                    filename: name,
                    content: fs.readFileSync(abs_path+`mail/out/${file}/${name}`)
                }
            });

            let transporter = nodemailer.createTransport(config.smtp);
            transporter.sendMail({
                from: mail.from,
                to: mail.to,
                subject: mail.subject,
                text: mail.message,
                html: mail.messageHtml,
                attachments: files
            });
            transporter.close();

            fs.renameSync(abs_path+`mail/out/${file}`, abs_path+`mail/sent/${file}`);
        });
}
else {
    const Imap = require('node-imap');
    const { simpleParser } = require('mailparser')

    const imap = new Imap(config.imap);
    imap.once('ready', function () {
        imap.openBox('INBOX', function (err, box) {
            if (err)
                throw err;

            let msgs = box.messages.total;
            if (msgs == 0)
                imap.end();

            const fetchResult = imap.seq.fetch("1:" + msgs, { bodies: '' });

            fetchResult.on('message', function (msg, seqno) {
                let parser, uid
                msg.on('body', function (stream) {
                    parser = simpleParser(stream)
                });

                msg.once('attributes', function (attrs) {
                    uid = attrs.uid
                    console.log(uid + " Flags: " + attrs.flags.join(","))
                });

                msg.once('end', function () {
                    console.log(uid + ' Finished')
                    parser.then(parsed => {
                        const fromEmail = parsed.from?.value?.[0]?.address

                        if (fromEmail) {
                            try {
                                fs.mkdirSync(abs_path+`mail/in/${uid}`);
                            } catch (error) { }

                            let mail = JSON.stringify({
                                from: parsed.from.text,
                                subject: parsed.subject,
                                date: parsed.date,
                                messageHtml: parsed.html ? parsed.html : undefined,
                                message: parsed.text
                            }, null, 4);

                            fs.writeFileSync(abs_path+`mail/in/${uid}/mail.json`, mail);

                            for (let att of parsed.attachments)
                                fs.writeFile(abs_path+"mail/in/" + uid + "/" + att.filename, att.content, () => { });

                            imap.expunge(uid, () => {})
                            console.log(uid + ' Deleted')

                            if (--msgs == 0) {
                                imap.closeBox(true, (err) => { });
                                imap.end();
                            }
                        } else {
                            console.warn('No from email found in', parsed)
                        }
                    });
                });
            });

            fetchResult.once('end', function () {
                console.log('Done fetching all messages!');
            });
        });
    });

    imap.once('error', function (err) {
        console.log(err);
    });

    imap.once('end', function () {
        console.log('Connection ended');
    });

    imap.connect();
}
